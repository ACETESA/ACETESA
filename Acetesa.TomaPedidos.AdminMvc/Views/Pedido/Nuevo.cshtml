@using System.Configuration;
@using Acetesa.TomaPedidos.AdminMvc.Helpers
@using Acetesa.TomaPedidos.AdminMvc.Models
@using Acetesa.TomaPedidos.Transversal.Enums
@model Acetesa.TomaPedidos.AdminMvc.Models.PedidoEditViewModel

@{
    ViewBag.Title = "Nueva Pedido";
    EnviarMailViewModel emailModel = ViewBag.EmailModel;
}

<div class="card">
    <div class="card-header bg-success text-bg-secondary">
        <h3>Nuevo Pedido</h3>
    </div>
</div>

@using (Ajax.BeginForm("NuevoDetalle", "Pedido", new AjaxOptions
{
    HttpMethod = "POST",
    Url = Url.Action("NuevoDetalle", "Pedido"),
    OnBegin = "OnBegin",
    OnSuccess = "OnSuccess",
    OnComplete = "OnComplete",
    OnFailure = "OnFailure",
    UpdateTargetId = "result"
}, new { @id = "pedidoForm" }))
{
    @Html.Hidden("sessionType", SessionTypes.Nuevo)
    @Html.HiddenFor(model => model.cd_razsoc)
    @Html.HiddenFor(model => model.PedidoDetailViewModel.cd_artic)
<div class="row ms-1 me-1">
    <hr />
    @*<div class="col-9 col-lg-5 mb-3">
            @Html.LabelFor(model => model.cc_analis, htmlAttributes: new { @class = "form-label" })
            @Html.DropDownListFor(model => model.cc_analis, ViewBag.GetClientes as SelectList, new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.cc_analis, "", new { @class = "text-danger", @id = "msgeCliente" })
        </div>*@
    <div class="col-9 col-lg-5 mb-3">
        @Html.LabelFor(model => model.cc_analis, htmlAttributes: new { @class = "form-label ps-2" })
        <div class="input-group">
            @Html.DropDownListFor(model => model.cc_analis, ViewBag.GetClientes as SelectList, new { @class = "selectpicker" })
            @Html.ValidationMessageFor(model => model.cc_analis, "", new { @class = "text-danger", @id = "msgeCliente" })
            <script>
                $('#cc_analis').attr('data-show-subtext', 'true');
                $('#cc_analis').attr('data-live-search', 'true');
                $('#cc_analis').attr('data-width', '100%');
            </script>
            <style>
                .bootstrap-select .dropdown-menu {
                    max-width: 100% !important;
                    font-size: 100%;
                }
            </style>
        </div>
    </div>
    <div class="col-3 col-lg-1 align-self-end mb-3">
        <button type="button" class="btn btn-secondary" data-target="#modal-cliente" id="btnClienteNew">Nuevo</button>
    </div>
    <div class="col-12 col-lg-3 mb-3">
        @Html.LabelFor(model => model.FechaEmision, htmlAttributes: new { @class = "form-label" })
        @Html.EditorFor(model => model.FechaEmision, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.FechaEmision, "", new { @class = "text-danger", @id = "msgeCliente" })
    </div>
    <div class="col-12 col-lg-3 mb-3">
        @Html.LabelFor(model => model.FechaEntrega, htmlAttributes: new { @class = "form-label" })
        @Html.EditorFor(model => model.FechaEntrega, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.FechaEntrega, "", new { @class = "text-danger", @id = "msgeCliente" })
    </div>


    <div class="col-12 col-lg-4 mb-3">
        @Html.LabelFor(model => model.Tienda, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.Tienda, ViewBag.GetTiendas as SelectList, new { @class = "form-select" })
        @Html.ValidationMessageFor(model => model.Tienda, "", new { @class = "text-danger" })
    </div>
    <div class="col-12 col-lg-4 mb-3">
        @Html.LabelFor(model => model.igv_bo, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.igv_bo, ViewBag.GetIgv as SelectList, new { @class = "form-select" })
        @Html.ValidationMessageFor(model => model.igv_bo, "", new { @class = "text-danger" })
    </div>
    <div class="col-12 col-lg-4 mb-3">
        @Html.LabelFor(model => model.zonaLiberada_bo, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.zonaLiberada_bo, ViewBag.GetZonaLiberada as SelectList, new { @class = "form-select" })
        @Html.ValidationMessageFor(model => model.zonaLiberada_bo, "", new { @class = "text-danger" })
    </div>


    <div class="col-12 col-lg-4 mb-3" style="display:none;">
        @Html.LabelFor(model => model.mostrarIGV_bo, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.mostrarIGV_bo, ViewBag.GetMostrarIGV as SelectList, new { @class = "form-select" })
        @Html.ValidationMessageFor(model => model.mostrarIGV_bo, "", new { @class = "text-danger" })
    </div>


    <div class="col-12  mb-3">
        @Html.LabelFor(model => model.cb_recojo, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.cb_recojo, ViewBag.GetRecojo as SelectList, new { @class = "form-select" })
    </div>

    <div class="bg-warning rounded-3 bg-opacity-25">
        <div class="col-12 mb-3" id="pnl_Cn_lug">
            @Html.LabelFor(model => model.Cn_lug, htmlAttributes: new { @class = "form-label" })
            <div class="input-group">
                @Html.DropDownListFor(model => model.Cn_lug, ViewBag.GetLugarEntrega as SelectList, new { @class = "form-control" })
                <div class="input-group-addon mostrar-grilla-lugarEntrega" id="">
                    <button type="button" class="btn btn-secondary fa fa-search h-100"></button>
                </div>
            </div>
        </div>


        <div class="col-12 mb-3" id="pnl_cb_contactoEntregaDirecta">
            @Html.LabelFor(model => model.IdContactoEntregaDirecta, htmlAttributes: new { @class = "form-label" })
            <div class="input-group">
                @Html.DropDownListFor(model => model.IdContactoEntregaDirecta, ViewBag.GetContactoEntregaDirecta as SelectList, new { @class = "form-select" })
                <div class="input-group-addon mostrar-grilla-contactoEntregaDirecta" id="">
                    <button type="button" class="btn btn-secondary fa fa-search h-100"></button>
                </div>
            </div>
        </div>
    </div>


    <div class="bg-warning rounded-3 bg-opacity-25">

        <div class="col-12 mb-3 pnl_CC_transp">
            @Html.LabelFor(model => model.CC_transp, htmlAttributes: new { @class = "form-label" })
            <div class="input-group">
                @Html.DropDownListFor(model => model.CC_transp, ViewBag.GetTransporte as SelectList, new { @class = "form-select" })
                <div class="input-group-addon mostrar-grilla-transporte" id="">
                    <button type="button" class="btn btn-secondary fa fa-search h-100"></button>
                </div>
            </div>
        </div>


        <div class="col-12 mb-3 pnl_CC_transp">
            @Html.LabelFor(model => model.ContactoTransporte, htmlAttributes: new { @class = "form-label" })
            <div class="input-group">
                @Html.DropDownListFor(model => model.ContactoTransporte, ViewBag.GetContactoTransporte as SelectList, new { @class = "form-select" })
                <div class="input-group-addon mostrar-grilla-contacto-transporte" id="">
                    <button type="button" class="btn btn-secondary fa fa-search h-100"></button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12 col-lg-3  mb-3">
        @Html.LabelFor(model => model.cc_moneda, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.cc_moneda, ViewBag.GetMonedas as SelectList, new { @class = "form-select" })
        @Html.ValidationMessageFor(model => model.cc_moneda, "", new { @class = "text-danger" })
    </div>
    <div class="col-12 col-lg-2  mb-3">
        @Html.LabelFor(model => model.n_i_paralelo_venta, htmlAttributes: new { @class = "form-label" })
        @Html.TextBoxFor(model => model.n_i_paralelo_venta, new { @class = "form-control", @readonly = "readonly" })
    </div>
    <div class="col-12 col-lg-4  mb-3">
        @Html.LabelFor(model => model.cc_vta, htmlAttributes: new { @class = "form-label" })
        @Html.DropDownListFor(model => model.cc_vta, ViewBag.GetCondicionesVentas as SelectList, new { @class = "form-select" })
        @Html.ValidationMessageFor(model => model.cc_vta, "", new { @class = "text-danger" })
    </div>
    <div class="col-12 col-lg-3  mb-3">
        @Html.LabelFor(model => model.cn_ocompra, htmlAttributes: new { @class = "form-label" })
        @Html.EditorFor(model => model.cn_ocompra, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.cn_ocompra, "", new { @class = "text-danger" })
    </div>


    <div class="col-12  mb-3">
        @Html.LabelFor(model => model.Vt_observacion, htmlAttributes: new { @class = "form-label" })
        @Html.TextAreaFor(model => model.Vt_observacion, new { maxlength = 250, @class = "form-control" })
    </div>



    <div id="containerArticulo" class="col-12">

        <div class="card" id="AgregarArticulos">
            <div class="card-header bg-dark text-bg-secondary opacity-75">
                Agregar Artículos
            </div>
            <div class="card-body">
                <div id="articulo">
                    <div class="row">
                        <div class="col-12 mb-3">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.cc_grupo, htmlAttributes: new { @class = "form-label" })
                            @Html.DropDownListFor(model => model.PedidoDetailViewModel.cc_grupo, ViewBag.GetGrupo as SelectList, new { @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.cc_grupo, "", new { @class = "text-danger" })
                        </div>


                        <div class="col-12 mb-3">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.cc_subgrupo, htmlAttributes: new { @class = "form-label" })
                            @Html.DropDownListFor(model => model.PedidoDetailViewModel.cc_subgrupo, ViewBag.GetSubGrupo as SelectList, new { @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.cc_subgrupo, "", new { @class = "text-danger" })
                        </div>


                        <div class="col-12 col-lg-9 mb-3 bg-success p-1 rounded-3 bg-opacity-25">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.cc_artic, htmlAttributes: new { @class = "form-label ps-2" })
                            <div class="input-group">
                                @Html.DropDownListFor(model => model.PedidoDetailViewModel.cc_artic, ViewBag.GetArticulos as SelectList, new { @class = "selectpicker" })
                                @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.cc_artic, "", new { @class = "text-danger", @id = "msgeArticulo" })
                                <script>
                                    $('#PedidoDetailViewModel_cc_artic').attr('data-show-subtext', 'true');
                                    $('#PedidoDetailViewModel_cc_artic').attr('data-live-search', 'true');
                                    $('#PedidoDetailViewModel_cc_artic').attr('data-width', '100%');
                                </script>
                                <style>
                                    .bootstrap-select .dropdown-menu {
                                        max-width: 100% !important;
                                        font-size: 91%;
                                    }
                                </style>
                            </div>
                        </div>
                        <div class="col-12 col-lg-3 mb-3 rounded-3 border border-white border-3" id="datosStockTodasTiendas" style="font-size:75%;">

                        </div>


                        <div class="col-12 mb-3">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.fq_cantidad, htmlAttributes: new { @class = "form-label" })
                            @Html.EditorFor(model => model.PedidoDetailViewModel.fq_cantidad, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fq_cantidad, "", new { @class = "text-danger" })
                        </div>


                        <div class="col-12 col-lg-6 mb-3">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.fm_precio_tonelada, htmlAttributes: new { @class = "form-label" })
                            <div class="input-group">
                                @Html.EditorFor(model => model.PedidoDetailViewModel.fm_precio_tonelada, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fm_precio_tonelada, "", new { @class = "text-danger" })
                                <div class="input-group-addon">
                                    <button type="button" class="btn btn-secondary fa fa-refresh h-100" id="btnClienteNew" title="Recalcular Precio Final" onclick="calcularPrecioFinalPrecioTM(0);"></button>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-6 mb-3">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.fq_peso_teorico, htmlAttributes: new { @class = "form-label" })
                            @Html.EditorFor(model => model.PedidoDetailViewModel.fq_peso_teorico, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fq_peso_teorico, "", new { @class = "text-danger" })
                        </div>





                        @{var sqlDB3 = new System.Data.SqlClient.SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);
                            if (sqlDB3.InitialCatalog == "ZICO_ERP01")
                            {
                                <div class="col-12 col-lg-6 mb-3">
                                    @Html.LabelFor(model => model.PedidoDetailViewModel.fm_precio, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.PedidoDetailViewModel.fm_precio, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fm_precio, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-12 col-lg-6 mb-3">
                                    @Html.LabelFor(model => model.PedidoDetailViewModel.fm_precio2, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.PedidoDetailViewModel.fm_precio2, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fm_precio2, "", new { @class = "text-danger" })
                                </div>
                            }
                            else
                            {
                                <div class="col-12 mb-3">
                                    @Html.LabelFor(model => model.PedidoDetailViewModel.fm_precio2, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.PedidoDetailViewModel.fm_precio2, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fm_precio2, "", new { @class = "text-danger" })
                                </div>
                            }
                        }


                        <div class="col-12 mb-3">
                            @Html.LabelFor(model => model.PedidoDetailViewModel.fm_precio_fin, htmlAttributes: new { @class = "form-label" })
                            <div class="input-group">
                                @Html.EditorFor(model => model.PedidoDetailViewModel.fm_precio_fin, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PedidoDetailViewModel.fm_precio_fin, "", new { @class = "text-danger" })
                                <div class="input-group-addon">
                                    <button type="button" class="btn btn-secondary fa fa-refresh h-100" id="btnClienteNew" title="Recalcular Precio TM" onclick="calcularPrecioFinalPrecioTM(1);"></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <input type="submit" value="Agregar" class="btn btn-dark opacity-75" id="btnAdd" />
            </div>
        </div>
    </div>
</div>
}
<hr />
<div class="table-responsive" id="result">
    @if (Session["pedido_DetailNuevo"] != null)
    {
        Html.RenderPartial("_PartialPedidoDetail", Session["pedido_DetailNuevo"]);
    }
</div>

@{
    Html.RenderPartial("_PartialClienteNew", Model.ClienteNewViewModel);
    Html.RenderPartial("_PartialEnviarMail", Model.EnviarMailViewModel);
    Html.RenderPartial("_PartialLugarEntrega", Model.LugarEntregaNewViewModel);
    Html.RenderPartial("_PartialContactoEntregaDirecta", Model.ContactoEntregaDirectaNewViewModel);
    Html.RenderPartial("_PartialTransporteCliente", Model.TransportistaNewViewModel);
    Html.RenderPartial("_PartialContactoTransporte", Model.ContactoTransporteNewModel);
    Html.RenderPartial("_PartialMensajeConfirmacion");
}

@using (Html.BeginForm("Nuevo", "Pedido", FormMethod.Post, new { @id = "formNewPedido" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.cn_pedido)
    @Html.HiddenFor(model => model.cn_proforma)
    @Html.HiddenFor(model => model.EsProforma)
    @Html.Hidden("scc_analis", "")
    @Html.Hidden("scc_moneda", "")
    @Html.Hidden("scc_vta", "")
    @Html.Hidden("sfecha_emision", "")
    @Html.Hidden("sfecha_entrega", "")
    @Html.Hidden("sfm_tipcam", "0")
    @Html.Hidden("scn_suc", "")
    @Html.Hidden("scb_recojo", "")
    @Html.Hidden("sPara", "")
    @Html.Hidden("sConCopia", "")
    @Html.Hidden("sAsunto", "")
    @Html.Hidden("sMensaje", "")
    @Html.Hidden("sCn_lug", "")
    @Html.Hidden("sIdContactoEntregaDirecta", "")
    @Html.Hidden("sTienda", "")
    @Html.Hidden("sIgv_bo", "")
    @Html.Hidden("sZonaLiberada", "")
    @Html.Hidden("sCC_transp", "")
    @Html.Hidden("sContactoTransporte", "")
    @Html.Hidden("sVt_observacion", "")
    @Html.Hidden("sCn_ocompra", "")
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-horizontal">
        <div class="row">
            <div class="col-offset-2 col-10">
                <input type="submit" value="Guardar" class="btn btn-success" id="btnSave" />
                <input type="button" value="Guardar y enviar" class="btn btn-outline-success" id="btnSaveAndSend" />
            </div>
        </div>
    </div>
}

@section CssTop{
    @Styles.Render("~/Content/ui")
    <link href="~/Content/toastr.min.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-select.min.css" rel="stylesheet" />
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    <script src="~/Scripts/jquery.maskedinput.min.js"></script>
    <script src="~/Scripts/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/toastr.min.js"></script>
    <script src="~/Scripts/lib/Ajax.js?v=7"></script>
    <script src="~/Scripts/app/email-service.js?v=7"></script>
    <script src="~/Scripts/bootstrap-select.min.js"></script>
    <script type="text/javascript">
        var urlObtenerGrupoSubgrupoArtic = "@Url.Action("ObtenerGrupoSubgrupoArticulo", "Cotizacion")";
        var urlStockSegunArticulo = "@Url.Action("StockSegunArticulo", "Pedido")";
        var urlListarSectores = "@Url.Action("Sectores", "Pedido")";
        var urlListarDepartamentos = "@Url.Action("Departamentos", "Pedido")";
        var urlListarProvincias = "@Url.Action("Provincias", "Pedido")";
        var urlListarDistritos = "@Url.Action("Distritos", "Pedido")";
        var urlValidarVendedorCliente = "@Url.Action("ValidarVendedorCliente", "Pedido")";
        var urlGetColumnasContactoEntregaDirecta = "@Url.Action("GetColumnasContactoEntregaDirecta", "Pedido")";
        var urlGetEmailCliente ="@Url.Action("GetEmailCliente", "Pedido")";
        var urlValidarStockPedido = "@Url.Action("ValidarStockPedido", "Pedido")";
        var urlValidaProductosCotizacion = '@Url.Action("ValidaProductosCotizacion", "Pedido")';
        var urlValidarExistenciaClienteRUC = '@Url.Action("ValidarExistenciaClientePorRUC", "Cliente")'
        var urlValidarClienteEnZonaLiberada = '@Url.Action("ValidarClienteEnZonaLiberada", "Pedido")'
        var urlGetArticulosByGrupoParam ="@Url.Action("GetArticulosByGrupoParam", "Pedido")";
        var urlGetSubGrupos ="@Url.Action("GetSubGrupos", "Pedido")";
        var urlValidaCreditoSobregiroPorPedido = "@Url.Action("ValidaCreditoSobregiroPorPedido", "Pedido")";
        var urlStockTodasTiendasPorArticulo ="@Url.Action("StockTodasTiendasPorArticulo", "Cotizacion")";
        var urlSelectClientesSegunCarteraVendedorYLibres ="@Url.Action("SelectClientesSegunCarteraVendedorYLibres", "Cliente")";

    </script>
    <script>
        var gl_IdArtic;
        _baseUrl = "@ViewBag.BaseUrl";
        var emailModel = @Html.Json(emailModel);
        if (emailModel != null) {
            emailModel.cnPedido = "@ViewBag.CnPedido";
        }

        //Variable Global de edicion:
        var gs_editando = 0;

    </script>

    @{var sqlDB1 = new System.Data.SqlClient.SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString); }

    @*INICIO: Bloquear controles select*@
    @if (sqlDB1.InitialCatalog == "ZICO_ERP04")
    {
        <script>
            $(document).ready(function () {
                document.getElementById("igv_bo").value = "0";
                $('#zonaLiberada_bo option:not(:selected)').attr('disabled', true);
                $('#igv_bo option:not(:selected)').attr('disabled', true);
                $('#mostrarIGV_bo option:not(:selected)').attr('disabled', true);

            });
        </script>
    }
    else
    {
        <script>
            document.getElementById("zonaLiberada_bo").value = "0";
            document.getElementById("mostrarIGV_bo").value = "1";

            var $EsProforma = $("#EsProforma");
            if ($EsProforma.val().toLowerCase() === "true") {
            }
            else {
                document.getElementById("igv_bo").value = "0";
            }


            $('#zonaLiberada_bo option:not(:selected)').attr('disabled', true);
            $('#mostrarIGV_bo option:not(:selected)').attr('disabled', true);
        </script>
    }
    @*FIN: Bloquear controles select*@

    @*INICIO: Reseleccionar segun Zona Liberada*@
    <script>
        var slcchange = document.getElementById("zonaLiberada_bo");
        slcchange.addEventListener("change", function () {
            if (this.value == "1") {
                document.getElementById("igv_bo").value = "0";
                document.getElementById("mostrarIGV_bo").value = "0";
            } else {
                document.getElementById("igv_bo").value = "0";
                document.getElementById("mostrarIGV_bo").value = "1";
            }
        });

    </script>
    @*FIN: Reseleccionar segun Zona Liberada*@

    <script>
        $("#Ruc").blur(function () {
            validarExistenciaClienteXRUC();
        });

        function validarExistenciaClienteXRUC() {
            var $Ruc = $("#Ruc");
            var ccAnalis = $Ruc.val();
            $.ajax({
                destroy: true,
                url: urlValidarExistenciaClienteRUC,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    cc_analis: ccAnalis
                }),
                dataType: "json",
                beforeSend: function () {
                },
                success: function (data) {
                    var error = data.error;
                    var mensaje = data.mensaje;
                    if (error === "True") {//Si hay error
                        $('#clienteForm').trigger("reset");
                        $("#btnSendClienteNew").prop("disabled", true);
                        toastr.error(mensaje);
                    }
                    else {//No hay error
                        $("#btnSendClienteNew").prop("disabled", false);
                    }
                },
                error: function (err) {
                }
            });
        }
    </script>

    @{var sqlDB2 = new System.Data.SqlClient.SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString); }

    @if (sqlDB2.InitialCatalog == "ZICO_ERP01")
    {

        <script>
            function validarClienteZonaLiberadaXRUC() {
                var $Ruc = document.getElementById('cc_analis').value;

                var ccAnalis = $Ruc;
                $.ajax({
                    destroy: true,
                    url: urlValidarClienteEnZonaLiberada,
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        ruc: ccAnalis
                    }),
                    dataType: "json",
                    beforeSend: function () {
                    },
                    success: function (data) {
                        var zonaLiberada = data;

                        $('#zonaLiberada_bo option:not(:selected)').attr('disabled', false);
                        $('#mostrarIGV_bo option:not(:selected)').attr('disabled', false);



                        $("#zonaLiberada_bo").attr('selectedIndex', '-1').find("option:selected").removeAttr("selected");
                        $('select[id^="zonaLiberada_bo"] option[value="' + zonaLiberada + '"]').attr("selected", "selected");
                        document.getElementById("zonaLiberada_bo").value = zonaLiberada;


                        if (zonaLiberada == "1") {
                            document.getElementById("mostrarIGV_bo").value = "0";
                        } else {
                            document.getElementById("mostrarIGV_bo").value = "1";
                        }

                        $('#zonaLiberada_bo option:not(:selected)').attr('disabled', true);
                        $('#mostrarIGV_bo option:not(:selected)').attr('disabled', true);

                    },
                    error: function (err) {
                    }
                });
            }

        </script>

    }
    else
    {

        <script>
            function validarClienteZonaLiberadaXRUC() {
                var $Ruc = document.getElementById('cc_analis').value;

                var ccAnalis = $Ruc;
                $.ajax({
                    destroy: true,
                    url: urlValidarClienteEnZonaLiberada,
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        ruc: ccAnalis
                    }),
                    dataType: "json",
                    beforeSend: function () {
                    },
                    success: function (data) {
                        var zonaLiberada = data;

                        $('#zonaLiberada_bo option:not(:selected)').attr('disabled', false);
                        $('#igv_bo option:not(:selected)').attr('disabled', false);
                        $('#mostrarIGV_bo option:not(:selected)').attr('disabled', false);



                        $("#zonaLiberada_bo").attr('selectedIndex', '-1').find("option:selected").removeAttr("selected");
                        $('select[id^="zonaLiberada_bo"] option[value="' + zonaLiberada + '"]').attr("selected", "selected");
                        document.getElementById("zonaLiberada_bo").value = zonaLiberada;


                        if (zonaLiberada == "1") {
                            document.getElementById("igv_bo").value = "0";
                            document.getElementById("mostrarIGV_bo").value = "0";
                        } else {
                            document.getElementById("igv_bo").value = "0";
                            document.getElementById("mostrarIGV_bo").value = "1";
                        }

                        $('#zonaLiberada_bo option:not(:selected)').attr('disabled', true);
                        $('#igv_bo option:not(:selected)').attr('disabled', true);
                        $('#mostrarIGV_bo option:not(:selected)').attr('disabled', true);

                    },
                    error: function (err) {
                    }
                });
            }

        </script>
    }

    <script src="~/Scripts/app/PedidoNewScript.js?v=7"></script>
    <script src="~/Scripts/app/Pedido.js?v=7"></script>

    <script>
        var cn_pedido = $("#cn_pedido").val(); //Setting value to pedido
        var messageValidation = "@ViewBag.MessageValidation";
        if ($.trim(messageValidation).length > 0) {
            toastr.warning(messageValidation);
            scrollToScreen("#articulo", 1000);
        }
        var info = "@ViewBag.Info";
        if ($.trim(info).length > 0) {
            toastr.info(info);
        }
        var success = "@ViewBag.Success";
        if ($.trim(success).length > 0) {
            toastr.success(success);
        }

        function bloquearDetalle() {
            $(".elimina-grilla").hide();
            $(".editar-grilla").hide();
            $(".btn").addClass("disabled");
            $("#containerArticulo").hide();
            $("#containerPedido").find(":input").attr("disabled", "disabled");
        }

        var errorCotizacion = "@ViewBag.CotizacionError";
        if ($.trim(errorCotizacion).length > 0) {
            bloquearDetalle();
            toastr.error(errorCotizacion,"", {
                timeOut: 0,
                extendedTimeOut: 0
            });
        }
        var $EsProforma = $("#EsProforma");
        if ($EsProforma.val().toLowerCase() === "true") {
            $("#txtRazonSocial, #FechaEmision, #btnClienteNew").attr("disabled", "disabled");

            $("#cc_analis option:not(:selected)").prop("disabled", true);
            $("#cc_moneda option:not(:selected)").prop("disabled", true);
            $("#cc_vta option:not(:selected)").prop("disabled", true);

            $('label[for=PedidoDetailViewModel_cc_grupo], #PedidoDetailViewModel_cc_grupo').hide();
            $('label[for=PedidoDetailViewModel_cc_subgrupo], #PedidoDetailViewModel_cc_subgrupo').hide();
            disableSelect();
        }
    </script>
}