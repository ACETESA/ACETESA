@using System.Globalization
@model Acetesa.TomaPedidos.AdminMvc.Models.VentaViewModel
@{
    Boolean tipoResultado = false;
}
@if (Model != null && Model.DatosSP != null && Model.DatosSP.Any())
{


    <div class="card table-responsive" id="tableSector">
        <div class="card-header bg-white">
            <table class="table table-striped table-hover w-100" id="tblListadoVenta">
                <thead class="table-dark">
                    <tr>
                        <th></th>
                        <th></th>
                        @*@if (Model.CabecerasSP.Contains("Documento"))
                            {
                                <th></th>
                                <th></th>
                            }*@
                        @foreach (string item in Model.CabecerasSP)
                        {
                            if (item != "Ruta" && item != "Ruc")
                            {
                                <th>
                                    @item
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (Dictionary<string, object> item in Model.DatosSP)
                    {
                        <tr>
                            @if (!Model.CabecerasSP.Contains("Documento"))
                            {
                                tipoResultado = false;
                                <td></td>
                                <td></td>
                            }
                            else
                            {
                                tipoResultado = true;
                            }
                            @foreach (string itemCab in Model.CabecerasSP)
                            {
                                if (itemCab == "Documento")
                                {
                                    if (item["Ruta"].ToString().Replace(@"\", "@") == "")
                                    {
                                        <td>
                                            <a id="nohovera" class="btn btn-outline-warning btn-sm fa fa-envelope-o" href="#" title="No se ha encontrado el archivo en el directorio" style="opacity:0.2;cursor:no-drop;"></a>
                                        </td>
                                        <td>
                                            <a id="nohoverb" class="btn btn-outline-secondary btn-sm fa fa-download" href="#" title="No se ha encontrado el archivo en el directorio" style="opacity:0.2;cursor:no-drop;"></a>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            <a id="aEnviarCorreo" class="btn btn-outline-warning btn-sm fa fa-envelope-o" href="#" onclick="onclickEnviarCorreo('@item["Ruc"].ToString()','@item["Documento"].ToString()','@item["Ruta"].ToString().Replace(@"\","@")');" title="Enviar documento por correo"></a>
                                        </td>
                                        <td>
                                            <a id="aDescargar" class="btn btn-outline-secondary btn-sm fa fa-download" href="#" onclick="descargarDocumentosDisponibles('@item["Ruta"].ToString().Replace(@"\", "@")','@item["Documento"].ToString()');" title="Descargar"> </a>
                                        </td>
                                    }
                                    @*if (item["Ruta"].ToString().Replace(@"\", "@").Contains("sin ruta"))
                                        {
                                            <td>
                                                <a id="nohovera" class="btn btn-primary btn-sm glyphicon glyphicon-envelope" href="#" title="No se ha encontrado el archivo en el directorio" style="opacity:0.2;cursor:no-drop;"></a>
                                            </td>
                                            <td>
                                                <a id="nohoverb" class="btn btn-default btn-sm glyphicon glyphicon-download-alt" href="#" title="No se ha encontrado el archivo en el directorio" style="opacity:0.2;cursor:no-drop;"></a>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                <a class="btn btn-primary btn-sm glyphicon glyphicon-envelope" href="#" onclick="onclickEnviarCorreo('@item["Ruc"].ToString()','@item["Documento"].ToString()','@item["Ruta"].ToString().Replace(@"\","@")');" title="Enviar documento por correo"></a>
                                            </td>
                                            <td>
                                                <a class="btn btn-default btn-sm glyphicon glyphicon-download-alt" href="#" onclick="descargarPDF('@item["Documento"].ToString()'); descargarZIP('@item["Documento"].ToString()'); descargarXML('@item["Documento"].ToString()');" title="Descargar"> </a>
                                            </td>
                                        }*@

                                    <script>
                                        function descargarDocumentosDisponibles(tipoDocumDisponible, documento) {
                                            if (tipoDocumDisponible == ("PDF-")) {
                                                descargarPDF(documento);
                                            }
                                            if (tipoDocumDisponible == ("ZIP-")) {
                                                descargarZIP(documento);
                                            }
                                            if (tipoDocumDisponible == ("XML")) {
                                                descargarXML(documento);
                                            }
                                            if (tipoDocumDisponible == ("PDF-ZIP-")) {
                                                descargarPDF(documento);
                                                descargarZIP(documento);
                                            }
                                            if (tipoDocumDisponible == ("PDF-XML")) {
                                                descargarPDF(documento);
                                                descargarXML(documento);
                                            }
                                            if (tipoDocumDisponible == ("ZIP-XML")) {
                                                descargarZIP(documento);
                                                descargarXML(documento);
                                            }
                                            if (tipoDocumDisponible == ("PDF-ZIP-XML")) {
                                                descargarPDF(documento);
                                                descargarZIP(documento);
                                                descargarXML(documento);
                                            }
                                        }
                                    </script>

                                }
                                if (itemCab != "Ruta" && itemCab != "Ruc")
                                {
                                    if (itemCab == "Guía Remisión")
                                    {
                                        <td>
                                            @item[itemCab].ToString()
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="text-end">
                                            @{
                                                string sMonto = item[itemCab].ToString().Replace(",", ".");

                                                try
                                                {
                                                    decimal iMonto = decimal.Parse(sMonto);
                                                    string formated_monto;
                                                    if (itemCab == "Per Documento")
                                                    {
                                                        formated_monto = iMonto.ToString();
                                                    }
                                                    else
                                                    {
                                                        formated_monto = iMonto.ToString("0.00");
                                                    }
                                                    @formated_monto
                                                }
                                                catch
                                                {
                                                    @item[itemCab].ToString().Replace(",", ".")
                                                }

                                            }
                                        </td>
                                                        }
                                                    }
                                                }
                        </tr>
                    }
                </tbody>
                <tfoot class="table-success">
                    <tr>
                        <th></th>
                        <th></th>
                        @foreach (string item in Model.CabecerasSP)
                        {
                            if (item != "Ruta" && item != "Ruc")
                            {
                                <th>
                                </th>
                            }
                        }
                    </tr>
                </tfoot>

            </table>
        </div>
    </div>



    if (tipoResultado == true)
    {
        <script>
            $('#tblListadoVenta').DataTable();
        </script>
    }
    else
    {
        <script>
            //$('#tblListadoVenta').DataTable();


            //Update footer
            $(document).ready(function () {
                $('#tblListadoVenta').DataTable({
                    columnDefs: [
                        {
                            target: 0,
                            visible: false,
                            searchable:false
                        },
                        {
                            target: 1,
                            visible: false,
                            searchable: false
                        }
                    ],
                    drawCallback: function () {
                        var api = this.api();
                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };
                        //Update footer
                        $(api.column(2).footer()).html(
                            'Total'
                        );

                        var columnas = [3, 4, 5, 6, 7, 8, 9, 10]; //the columns you wish to add
                        for (var j in columnas) {

                            var columnaActual = columnas[j];
                            // Total en todas las páginas
                            total = api
                                .column(columnaActual)
                                .data()
                                .reduce(function (a, b) {
                                    return intVal(a) + intVal(b);
                                }, 0);
                            // Update footer
                            $(api.column(columnaActual).footer()).html(total.toFixed(2)).addClass("text-end");
                        }

                    },
                    "pageLength": 50,
                    "language": {
                        "lengthMenu": "Mostrar _MENU_ registros",
                        "search": "Buscar:",
                        "info": "Mostrando _START_ al _END_ de _TOTAL_ registros",
                        "infoFiltered": "(Filtrado de _MAX_ registros en total)",
                        "zeroRecords": "Sin resultados coincidentes",
                        "paginate": {
                            "first": "Primero",
                            "last": "Último",
                            "next": "Siguiente",
                            "previous": "Anterior"
                        }
                    }
                });


                //// Get the column API object
                //var column = $('#tblListadoVenta').column($("#prueba").attr('data-column'));

                //// Toggle the visibility
                //column.visible(!column.visible());
            });

        </script>
    }



    @*if (tipoResultado == true)
        {
            <script type="text/javascript">
                var table = jQuery("#tblListadoVenta").DataTable(
                    {
                        "language": {
                            "sProcessing": "Procesando...",
                            "sLengthMenu": "Mostrar _MENU_ registros",
                            "sZeroRecords": "No hay ítems para mostrar",
                            "sEmptyTable": "Ningún dato disponible en esta tabla",
                            "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                            "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                            "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                            "sInfoPostFix": "",
                            "sSearch": "Buscar:",
                            "sUrl": "",
                            "sInfoThousands": ",",
                            "sLoadingRecords": "Cargando...",
                            "oPaginate": {
                                "sFirst": "Primero",
                                "sLast": "Último",
                                "sNext": "Siguiente",
                                "sPrevious": "Anterior"
                            },
                            "oAria": {
                                "sSortAscending": "Activar para ordenar la columna de manera ascendente",
                                "sSortDescending": "Activar para ordenar la columna de manera descendente"
                            },
                        },
                        "columnDefs": [
                            { className: "text-right align-middle", "targets": [0, 3, 4, 5] },
                            { className: "text-nowrap align-middle", "targets": [2] },
                            { orderable: false, "targets": [0, 1] }
                        ],
                        "order": [[2, "desc"]],
                    }
                );

            </script>
        }
        else
        {
            <script type="text/javascript">
                var table = jQuery("#tblListadoVenta").DataTable(
                    {
                        "language": {
                            "sProcessing": "Procesando...",
                            "sLengthMenu": "Mostrar _MENU_ registros",
                            "sZeroRecords": "No hay ítems para mostrar",
                            "sEmptyTable": "Ningún dato disponible en esta tabla",
                            "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                            "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                            "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                            "sInfoPostFix": "",
                            "sSearch": "Buscar:",
                            "sUrl": "",
                            "sInfoThousands": ",",
                            "sLoadingRecords": "Cargando...",
                            "oPaginate": {
                                "sFirst": "Primero",
                                "sLast": "Último",
                                "sNext": "Siguiente",
                                "sPrevious": "Anterior"
                            },
                            "oAria": {
                                "sSortAscending": "Activar para ordenar la columna de manera ascendente",
                                "sSortDescending": "Activar para ordenar la columna de manera descendente"
                            },
                        },
                        "columnDefs": [
                            { className: "text-right align-middle", "targets": [3, 4, 5, 6, 7, 8, 9, 10] },
                            { className: "text-nowrap align-middle", "targets": [2] },
                            { orderable: false, "targets": [0, 1] }
                        ],
                        "order": [[2, "desc"]],
                        "fnFooterCallback": function (row, data, start, end, display) {
                            var api = this.api(), data;
                            // Remove the formatting to get integer data for summation
                            var intVal = function (i) {
                                return typeof i === 'string' ?
                                    i.replace(/[\$,]/g, '') * 1 :
                                    typeof i === 'number' ?
                                        i : 0;
                            };
                            //Update footer
                            $(api.column(2).footer()).html(
                                'Total'
                            );

                            var columnas = [3, 4, 5, 6, 7, 8, 9, 10]; //the columns you wish to add
                            for (var j in columnas) {

                                var columnaActual = columnas[j];
                                // Total en todas las páginas
                                total = api
                                    .column(columnaActual)
                                    .data()
                                    .reduce(function (a, b) {
                                        return intVal(a) + intVal(b);
                                    }, 0);
                                // Update footer
                                $(api.column(columnaActual).footer()).html(total.toFixed(2));
                            }
                        }
                    }
                );

            </script>
        }*@
}